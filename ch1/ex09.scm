;; Exercise 1.9
;; The two procedures are shown below, with helper methods. The procedures
;; here are re-named new+ and new+tail to avoid errors due to re-defining the
;; + procedure.
(define default-dir "$HOME/var/sicp/")

(define (inc x)
  (+ x 1))
(define (dec x)
  (- x 1))

(define (new+ a b)
  (if (= a 0)
      b
      (inc (new+ (dec a) b))))

(define (new+tail a b)
  (if (= a 0)
      b
      (new+tail (dec a) (inc b))))
;; The processes generated by these procedures are shown here.

;; This process is linear recursive, since the state of the addition is
;; hidden in the interpreter. Each time the procedure is called, its result
;; is evaluated as an operand of the calling procedure.

(new+ 2 3)
(inc (new+ (dec 2) 3))
(inc (inc (new+ (dec 1) 3)))
(inc (inc (new+ 0 3)))
(inc (inc 3))
(inc 4)
5

(assert (equal? (new+ 2 3) 5))

;; This process is iterative, because the procedure is not called in the
;; operands, but the procedure returns the same value returned by itself, with
;; different operands. This is what is meant in the text by "The state is
;; contained in the operands of the procedure."
(new+tail 2 3)
(new+tail (dec 2) (inc 3))
(new+tail (dec 1) (inc 4))
5

(assert (equal? (new+tail 2 3) 5))
